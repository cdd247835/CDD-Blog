# 代码随想录算法训练营第33天|62.不同路径、63. 不同路径II、343. 整数拆分、96. 不同的二叉搜索树

## 62. 不同路径

```java
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int i = 0;i < m;i++){
            dp[i][0] = 1;
        }
        for(int j = 0;j < n;j++){
            dp[0][j] = 1;
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
            }
        }
        return dp[m - 1][n - 1];
    }
}
```

## 63. 不同路径II

```java
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            if (obstacleGrid[i][0] == 1) {
                dp[i][0] = 0;
                break; // 如果遇到障碍物，后续的行都无法到达
            } else {
                dp[i][0] = 1;
            }
        }
        for(int j = 0;j < n;j++){
            if(obstacleGrid[0][j] == 1){
                dp[0][j] = 0;
                break;
            }else{
                dp[0][j] = 1;
            }            
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 0){
                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
                }else{
                    dp[i][j] = 0;
                }
                
            }
        }
        return dp[m - 1][n - 1];
    }
}
```

## 343. 整数拆分

```java
class Solution {
    public int integerBreak(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 0;
        dp[2] = 1;
        for(int i = 3;i <= n;i++){
            for(int j = 1;j <= i / 2;j++){
                dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j]));
            }
        }
        return dp[n];
    }
}
```

## 96. 不同的二叉搜索树

```java
class Solution {
    public int numTrees(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i = 2;i <= n;i++){
            for(int j = 1;j <= i;j++){
                dp[i] +=dp[j - 1]*dp[i - j];
            }
        }
        return dp[n];
    }
}
```

