# 代码随想录算法训练营第18天 **530.二叉搜索树的最小绝对差** 、501.二叉搜索树中的众数、236. 二叉树的最近公共祖先

## 530.二叉搜索树的最小绝对差

```java
class Solution {
    private int res = Integer.MAX_VALUE;
    private TreeNode pre = null;
    private void traversal(TreeNode root){
        if(root == null){
            return;
        }
        traversal(root.left);
        if(pre != null){
            res = res > root.val - pre.val ? root.val - pre.val : res;
        }
        pre = root;
        traversal(root.right);
    }
    public int getMinimumDifference(TreeNode root) {
        traversal(root);
        return res;
    }
}
```

## 501.二叉搜索树中的众数

```java
class Solution {
    private TreeNode pre = null;
    private int maxCount = 0;
    private int count = 0;
    private List<Integer> res = new ArrayList<>();
    private void traversal(TreeNode cur){
        if(cur == null){
            return;
        }
        traversal(cur.left);
        if(pre == null){
            count = 1;
        }else if(pre.val == cur.val){
            count++;
        }else{
            count = 1;
        }
        pre = cur;
        if(count == maxCount){
            res.add(cur.val);
        }
        if(count > maxCount){
            maxCount = count;
            res.clear();
            res.add(cur.val);
        }
        traversal(cur.right);
    }
    public int[] findMode(TreeNode root) {
        traversal(root);
        int[] result = new int[res.size()];
        for (int i = 0; i < res.size(); i++) {
            result[i] = res.get(i);  // 将List转换为数组
        }
        return result;
    }
}
```

## 236. 二叉树的最近公共祖先

```java
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q){
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);
        if(left != null && right != null){
            return root;
        }
        if(left != null && right == null){
            return left;
        }else if(left == null && right != null){
            return right;
        }else{
            return null;
        }
    }
}
```



