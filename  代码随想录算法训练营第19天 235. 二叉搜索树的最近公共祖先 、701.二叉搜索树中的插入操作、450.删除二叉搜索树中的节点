# 代码随想录算法训练营第19天 235. 二叉搜索树的最近公共祖先 、701.二叉搜索树中的插入操作、450.删除二叉搜索树中的节点

## 235. 二叉搜索树的最近公共祖先

```java
//迭代法
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while(root != null){
            if(root.val > p.val && root.val > q.val){
                root = root.left;
            }else if(root.val < p.val && root.val < q.val){
                root = root.right;
            }else{
                return root;
            }
        }
        return null;
    }
}
```

```java
//递归法
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null){
            return null;
        }
        if(root.val > p.val && root.val > q.val){
            TreeNode left = lowestCommonAncestor(root.left,p,q);
            if(left != null){
                return left;
            }
        }
        if(root.val < p.val && root.val < q.val){
            TreeNode right = lowestCommonAncestor(root.right,p,q);
            if(right != null){
                return right;
            }
        }
        return root;
    }
}
```

## 701.二叉搜索树中的插入操作

```java
//迭代法
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null){
            TreeNode n = new TreeNode(val);
            return n;
        }
        TreeNode cur = root;
        TreeNode parent = root;
        while(cur != null){
            parent = cur;
            if(cur.val > val){
                cur = cur.left;
            }else{
                cur = cur.right;
            }
        }
        TreeNode node = new TreeNode(val);
        if(parent.val > val){
            parent.left = node;
        }else{
            parent.right = node;
        }
        return root;
    }
}
```

```java
//递归法
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null){
            TreeNode n = new TreeNode(val);
            return n;
        }
        if(root.val > val){
            root.left = insertIntoBST(root.left,val);
        }
        if(root.val < val){
            root.right = insertIntoBST(root.right,val);
        }
        return root;
    }
}
```

## 450.删除二叉搜索树中的节点

```java
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null){
            return null;
        }
        if(root.val == key){
            if(root.left == null && root.right == null){
                return null;
            }else if(root.left != null && root.right == null){
                return root.left;
            }else if(root.right != null && root.left == null){
                return root.right;
            }else if(root.right != null && root.left != null){
                TreeNode cur = root.right;
                while(cur.left != null){
                    cur = cur.left;
                }
                cur.left = root.left;
                return root.right;
            }
        }
        if(root.val > key){
            TreeNode left = deleteNode(root.left,key);
            root.left = left;
        }
        if(root.val < key){
            TreeNode right = deleteNode(root.right,key);
            root.right = right;
        }
        return root;
    }
}ß
```



